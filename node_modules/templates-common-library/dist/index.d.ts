declare module 'TemplatesCommonLib/baseClasses/configurationSettingsBase' {
	import Accessor from 'esri/core/Accessor'; class ConfigurationSettingsBase extends Accessor {
	    /** Determines if the App is being run within the Config Panel's IFrame */
	    withinConfigurationExperience: boolean;
	    private _draft;
	    private _draftMode;
	    constructor(params?: any);
	    initialize(): void;
	    _handleConfigurationUpdates(e: any): void;
	    private _isWithinConfigurationExperience;
	}
	export = ConfigurationSettingsBase;

}
declare module 'TemplatesCommonLib/interfaces/commonInterfaces' {
	export interface esriWidgetProps extends __esri.WidgetProperties {
	    config: any;
	    view?: __esri.MapView;
	    portal?: __esri.Portal;
	    propertyName?: string;
	}

}
declare module 'TemplatesCommonLib/functionality/basemapToggle' {
	/**
	 * This module contains a methods to assist with creation of the 4.x API BasemapToggle Widget
	 * using configuration variables that come from the Config Panel.
	 */
	import { esriWidgetProps } from 'TemplatesCommonLib/interfaces/commonInterfaces';
	export interface IBasemapToggleState {
	    originalBasemap: __esri.Basemap;
	    nextBasemap: __esri.Basemap;
	}
	/**
	 * Gets the proper Basemaps for the BasemapToggle (internally tracks the
	 * original Map's Basemap)
	 * @param props
	 */
	export function getBasemaps(props: esriWidgetProps): Promise<IBasemapToggleState>;
	/**
	 * Resets the Basemaps in the BasemapToggle by explicitly setting them.
	 * Note: This also affects the basemap on the current Webmap being shown in the view,
	 * because when nextBasemap on the BasemapToggle gets set, then that overrides the
	 * basemap property on the Webmap
	 * @param primaryBasemap The Basemap desired to be set as the Webmap's Basemap
	 * @param nextBasemap The Alternate Basemap in the BasemapToggle
	 */
	export function resetBasemapsInToggle(basemapToggle: __esri.BasemapToggle, primaryBasemap: __esri.Basemap, nextBasemap?: __esri.Basemap): void;

}
declare module 'TemplatesCommonLib/structuralFunctionality/t9nUtils' {
	export function handleT9N(pattern: string | RegExp, base: string, bundleLocation: string): Promise<any>;
	export const autoUpdatedStrings: Set<{
	    obj: any;
	    property: string;
	    bundleName: string;
	    key: string;
	}>;
	export function autoUpdateString(obj: any, property: string, bundleName: string, key: string): {
	    remove(): void;
	};

}
