function tabEventsPlugin() {
  var pluginConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var events = {
    /**
     * `tabHidden` - Fires when visitor goes to another browser tab.
     */
    tabHidden: 'tabHidden',

    /**
     * `tabVisible` - Fires when visitor comes back to window from another browser tab.
     */
    tabVisible: 'tabVisible'
  };
  return {
    name: 'tab-events',
    EVENTS: events,
    config: pluginConfig,
    bootstrap: function bootstrap(_ref) {
      var instance = _ref.instance;

      /* Dispatch event when tab visiblity changes */
      onTabChange(function (isHidden) {
        instance.dispatch({
          type: isHidden ? events.tabHidden : events.tabVisible
        });
      });
    }
  };
}
/**
 * Fire a callback on tab visibility changes
 * @param  {function} callback - function to run on visibility change
 * @return {function} detach onTabChange listener
 */

function onTabChange(callback) {
  if (typeof window === 'undefined') return false;
  var prop = getHiddenProp();
  if (!prop) return false;
  var event = "".concat(prop.replace(/[H|h]idden/, ''), "visibilitychange");

  var handler = function handler() {
    /* eslint-disable standard/no-callback-literal */
    if (document[prop]) return callback(true);
    return callback(false);
    /* eslint-enable */
  };

  document.addEventListener(event, handler);
  return function () {
    return document.removeEventListener(event, handler);
  };
}

function getHiddenProp() {
  var prefixes = ['webkit', 'moz', 'ms', 'o']; // if 'hidden' is natively supported just return it

  if ('hidden' in document) return 'hidden'; // otherwise loop over all the known prefixes until we find one

  return prefixes.reduce(function (acc, curr) {
    if (!acc && "".concat(curr, "Hidden") in document) {
      return "".concat(curr, "Hidden");
    }

    return acc;
  }, null);
}

export default tabEventsPlugin;
export { onTabChange };
